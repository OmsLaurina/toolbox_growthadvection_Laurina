function zoo=ga_growthadvection(init,name_curr,time0,varargin)


%% GA_GROWTHADVECTION: runs the plankton model alongside Lagrangian trajectories for a given initialization (positions & Nsupply) and initial time
%
% zoo=ga_growthadvection(init,name_curr,time0,varargin)
%
% Required inputs: 
%	init			structure containing .lon, .lat, .Nsupply (initialization position & Nsupply)
% 	name_curr		prefix of the current dataset to be used (netcdf files as generated by utils/ga_write_ariane_currents into dir_ariane_global/currents_data)
% 	time0			initialization time
%
% Optional inputs:
% 	dt						time step, default 0.2 days
%	nb_days_advec			trajectory duration, default 60 days
%	options_plankton_model	as a cell, see ga_model_2P2Z_fromNsupply, default {}
%							for krill customisation, set options_plankton_model to {'gmax_big',0.6*0.6,'eZ',0.1*0.6,'mZ',0.05*16/106*0.6}
%
% Monique Messi√©, 2021 for public version
tic
load('inputs/Nsupply_PROTEVS')
load('inputs/curr_struc','time_curr')
load('inputs/inputs')
		
arg=ga_read_varargin(varargin,{'dt',0.2,'nbdays_advec',13,'options_plankton_model',{}});
if isempty(init.Nsupply), zoo=[]; return, end


%% --------------------------------------------------------------------------------- %%
%% 								PREPARE OUTPUTS										 %%
%% --------------------------------------------------------------------------------- %%
xvalue = Nsupply_PROTEVS.lon_interp;
yvalue = Nsupply_PROTEVS.lat_interp;
iok = ~isnan(Nsupply_PROTEVS.Nsupply_interp(:,:,1));
[X,Y] = meshgrid(xvalue, yvalue);
point_1 = [X(iok) Y(iok)];

% output time vector
time=time0:arg.dt:(time0+arg.nbdays_advec);
time0=time_curr(1);
% output zoo
plankton_model_outputs={'Chl','P_1','P_2','Z'}; 
zoo=struct();
zoo.lon_ini=inputs.lon;
zoo.lat_ini=inputs.lat;
zoo.pos_ini = meshgrid(zoo.lon_ini, zoo.lat_ini);
zoo.Nsupply_ini=init.Nsupply;
zoo.time=time(:);
for varname=[{'lon2D','lat2D'},plankton_model_outputs], varname=varname{:};
	zoo.(varname)=nan(size(point_1,1),length(zoo.time));
end
zoo.units=struct();
zoo.units.Nsupply='mmolC/m3/d'; 



%% --------------------------------------------------------------------------------- %%
%% 									COMPUTE TRAJECTORIES							 %%
%% --------------------------------------------------------------------------------- %%
load('inputs/inputs')

positions=ga_advection_ariane(point_1,name_curr,'dt',arg.dt,'time0',datenum(2018,4,30),'nbdays_advec',arg.nbdays_advec); 
for varname={'lon2D','lat2D'}, varname=varname{:}; 
	zoo.(varname)(:,:)=positions.(varname); 
end
save('inputs/positions','positions')
save('outputs/zoo','zoo')
%% --------------------------------------------------------------------------------- %%
%% 										NSUPPLY FOR TRAJECTORY							 %%
%% --------------------------------------------------------------------------------- %%

Nsupply_traj=struct();
Nsupply_traj.Nsupply_part = NaN(size(positions.lon2D,1),length(positions.time));
lat_index_nut = [];
lon_index_nut = [];
for ip = 1:size(positions.lon2D,1)
for it = 1:length(positions.time)
 [d, ix ] = min( abs( Nsupply_PROTEVS.lon-positions.lon2D(ip,it) ) );        
        lon_index_nut(ip,it)=ix;%indice des laongitude
 [d, iy ] = min( abs( Nsupply_PROTEVS.lat-positions.lat2D(ip,it) ) );        
        lat_index_nut(ip,it)=iy;%indice des latitudes

Nsupply_traj.Nsupply_part(ip,it)=Nsupply_PROTEVS.Nsupply_interp(ix,iy,floor(it*arg.dt)+1);
end
end
save('outputs/Nsupply_traj','Nsupply_traj')

%% --------------------------------------------------------------------------------- %%
%% 										RUN PLANKTON MODEL							 %%
%% --------------------------------------------------------------------------------- %%

for ilat=1:size(positions.lon2D,1) %%% run for all particles
    %for it =1:length(time)
	%if ~isnan(zoo.Nsupply_ini(ilat,1))
		output = ga_model_2P1Z_v8(Nsupply_traj.Nsupply_part(ilat,:),0.5,0.6,0.1,'time',zoo.time-zoo.time(1),arg.options_plankton_model{:});
		%output=ga_model_2P2Z_fromPsupply_Med(Nsupply_traj.Nsupply_part(ilat,:),inputs.Nut_stock(ilat,1),psmall_ini(ilat),pbig_ini(ilat),'time',zoo.time-zoo.time(1),arg.options_plankton_model{:}); 
        %output = ga_model_2P2Z_fromP_SST(Nsupply_traj.Nsupply_part(ilat,:),SST_traj.SST_part(ilat,:),psmall_ini(ilat),pbig_ini(ilat),'time',zoo.time-zoo.time(1),arg.options_plankton_model{:});
        for varname=plankton_model_outputs, varname=varname{:}; 
			zoo.(varname)(ilat,:)=output.(varname); 
            zoo.units.(varname)=output.units.(varname); 
        end
    %end
end
toc				
return	